////////////////////////////////////////
// ▄▀█ █░░ ▄▀█ █▀█ █▄░█ █ ▄▀█ █▄░█
// █▀█ █▄▄ █▀█ █▀▀ █░▀█ █ █▀█ █░▀█
// 🅢🅐🅢🅢 🅜🅞🅓🅤🅛🅔🅢
// 
// (c) Copyright 2025 Alapnian
// (/) Developed by Alapnian Sass Dev
////////////////////////////////////////
@charset 'UTF-8';

@use "sass:map";
@use "sass:meta";
@use 'parameter';
@use 'variable';

/// 
/// Returns an error message stating a separator variable/parameter received the wrong value.
/// 
/// @param  {String}        $context                - The name of the function issuing the error.
/// @param  {String}        $name ['separator']     - The name of the variables/parameters for which there is an issue.
/// @param  {Bool|'warn'}   $catch                  - Optionally catch errors and return them as values without stopping compilation.
/// @return {String}        - A string describing what values are acceptable for a separator.
/// 
/// @group  API
/// @access public
/// 
/// @require    {Function}  meta.keywords
/// @require    {Function}  meta.variable-exists
/// @require    {Function}  map.has-key
/// @require    {Function}  map.get
/// @require    {Mixin}     variable.variable
/// @require    {Mixin}     parameter.parameter
/// 
@function separator($name, $context, $catch: false) {
    $message: 'Must be "space", "comma", "slash", or "auto"';

    @return parameter.parameter($message, $context, $name, $catch);
}

/// 
/// Alias function name of throw.separator
/// 
/// @group  API
/// @access public
/// 
/// @require    {Function}  meta.keywords
/// @require    {Function}  meta.variable-exists
/// @require    {Function}  map.has-key
/// @require    {Function}  map.get
/// @require    {Mixin}     variable.variable
/// @require    {Mixin}     parameter.parameter
/// 
@function separator-exception($name, $context, $catch: false) {
    @return separator($name, $context, $catch);
}

///
/// Output an error message stating a separator variable/parameter received the wrong value.
/// 
/// @param  {String|null}   $context [null]         - The name of the function or mixin issuing the error.
/// @param  {String}        $name ['separator']     - The name of the variables/parameters for which there is an issue.
/// @param  {Bool|'warn'}   $catch                  - Optionally catch errors and return them as values without stopping compilation.
/// 
/// @output A string describing what values are acceptable for a separator.
/// 
/// @group  API
/// @access public
/// 
/// @require    {Function}  meta.keywords
/// @require    {Function}  meta.variable-exists
/// @require    {Function}  map.has-key
/// @require    {Function}  map.get
/// @require    {Mixin}     variable.variable
/// @require    {Mixin}     parameter.parameter
/// 
@mixin separator($name, $context: null, $catch: false) {
    $message: 'Must be "space", "comma", "slash", or "auto"';

    @if $context == null {
        @include variable.variable($message, $name, $catch: $optCatch);
    }@else{
        @include parameter.parameter($message, $context, $name, $catch: $optCatch);
    }
}

///
/// Alias mixin name of throw.separator
/// 
/// @group  API
/// @access public
/// 
/// @require    {Function}  meta.keywords
/// @require    {Function}  meta.variable-exists
/// @require    {Function}  map.has-key
/// @require    {Function}  map.get
/// @require    {Mixin}     variable.variable
/// @require    {Mixin}     parameter.parameter
/// 
@mixin separator-exception($name, $context: null, $catch: false) {
    @include separator($name, $context, $catch)
}