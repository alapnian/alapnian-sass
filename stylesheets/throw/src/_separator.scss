////////////////////////////////////////
// ▄▀█ █░░ ▄▀█ █▀█ █▄░█ █ ▄▀█ █▄░█
// █▀█ █▄▄ █▀█ █▀▀ █░▀█ █ █▀█ █░▀█
// 🅢🅐🅢🅢 🅜🅞🅓🅤🅛🅔🅢
// 
// (c) Copyright 2025 Alapnian
// (/) Developed by Alapnian Sass Dev
////////////////////////////////////////
@charset 'UTF-8';

@use 'parameter';
@use 'variable';

/// 
/// Returns an error message stating a separator variable/parameter received the wrong value.
/// 
/// @param  {String}        $context    - The name of the function or mixin issuing the error.
/// @param  {Bool|'warn'}   $catch      - Optionally catch errors and return them as values without stopping compilation.
/// @return {String}        - A string describing what values are acceptable for a separator.
/// 
/// @group  API
/// @access public
/// 
/// @require    {Function}  meta.keywords
/// @require    {Function}  meta.variable-exists
/// @require    {Function}  map.has-key
/// @require    {Function}  map.get
/// @require    {Mixin}     variable.variable
/// @require    {Mixin}     parameter.parameter
/// 
@function separator($args...) {
    $keywords: meta.keywords($args);

    $message: 'Must be "space", "comma", "slash", or "auto"';
    $name: 'separator';
    $optCatch: if(map.has-key($keywords, 'catch'), map.get($keywords, 'catch'), if(meta.variable-exists('catch-error'), $catch-error, false));
    $context: if(map.has-key($keywords, 'context'), map.get($keywords, 'context'), null);

    @return if($context == null, variable.variable($message, $name, $catch: $optCatch), parameter.parameter($message, $context, $name, $catch: $optCatch));
}

/// 
/// Alias function name of throw.separator
/// 
/// @group  API
/// @access public
/// 
/// @require    {Function}  meta.keywords
/// @require    {Function}  meta.variable-exists
/// @require    {Function}  map.has-key
/// @require    {Function}  map.get
/// @require    {Mixin}     variable.variable
/// @require    {Mixin}     parameter.parameter
/// 
@function separator-exception($args...) {
    $keywords: meta.keywords($args);

    $message: 'Must be "space", "comma", "slash", or "auto"';
    $name: 'separator';
    $optCatch: if(map.has-key($keywords, 'catch'), map.get($keywords, 'catch'), if(meta.variable-exists('catch-error'), $catch-error, false));
    $context: if(map.has-key($keywords, 'context'), map.get($keywords, 'context'), null);

    @return if($context == null, variable.variable($message, $name, $catch: $optCatch), parameter.parameter($message, $context, $name, $catch: $optCatch));
}

///
/// Output an error message stating a separator variable/parameter received the wrong value.
/// 
/// @param  {String}        $context    - The name of the function or mixin issuing the error.
/// @param  {Bool|'warn'}   $catch      - Optionally catch errors, and output them as CSS comments without stopping compilation.
/// 
/// @output A string describing what values are acceptable for a separator.
/// 
/// @group  API
/// @access public
/// 
/// @require    {Function}  meta.keywords
/// @require    {Function}  meta.variable-exists
/// @require    {Function}  map.has-key
/// @require    {Function}  map.get
/// @require    {Mixin}     variable.variable
/// @require    {Mixin}     parameter.parameter
/// 
@mixin separator($args...) {
    $keywords: meta.keywords($args);

    $message: 'Must be "space", "comma", "slash", or "auto"';
    $name: 'separator';
    $optCatch: if(map.has-key($keywords, 'catch'), map.get($keywords, 'catch'), if(meta.variable-exists('catch-error'), $catch-error, false));
    $context: if(map.has-key($keywords, 'context'), map.get($keywords, 'context'), null);

    @if $context == null {
        @include variable.variable($message, $name, $catch: $optCatch);
    }@else{
        @include parameter.parameter($message, $context, $name, $catch: $optCatch);
    }
}

///
/// Alias mixin name of throw.separator
/// 
/// @group  API
/// @access public
/// 
/// @require    {Function}  meta.keywords
/// @require    {Function}  meta.variable-exists
/// @require    {Function}  map.has-key
/// @require    {Function}  map.get
/// @require    {Mixin}     variable.variable
/// @require    {Mixin}     parameter.parameter
/// 
@mixin separator-exception($args...) {
    $keywords: meta.keywords($args);

    $message: 'Must be "space", "comma", "slash", or "auto"';
    $name: 'separator';
    $optCatch: if(map.has-key($keywords, 'catch'), map.get($keywords, 'catch'), if(meta.variable-exists('catch-error'), $catch-error, false));
    $context: if(map.has-key($keywords, 'context'), map.get($keywords, 'context'), null);

    @if $context == null {
        @include variable.variable($message, $name, $catch: $optCatch);
    }@else{
        @include parameter.parameter($message, $context, $name, $catch: $optCatch);
    }
}